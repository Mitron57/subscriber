// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "subscriber/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"

	subpub "github.com/mitron57/subpub"
)

// PubSub is an autogenerated mock type for the PubSub type
type PubSub struct {
	mock.Mock
}

type PubSub_Expecter struct {
	mock *mock.Mock
}

func (_m *PubSub) EXPECT() *PubSub_Expecter {
	return &PubSub_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: ctx, message
func (_m *PubSub) Publish(ctx context.Context, message dto.Message) error {
	ret := _m.Called(ctx, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Message) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PubSub_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type PubSub_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - message dto.Message
func (_e *PubSub_Expecter) Publish(ctx interface{}, message interface{}) *PubSub_Publish_Call {
	return &PubSub_Publish_Call{Call: _e.mock.On("Publish", ctx, message)}
}

func (_c *PubSub_Publish_Call) Run(run func(ctx context.Context, message dto.Message)) *PubSub_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.Message))
	})
	return _c
}

func (_c *PubSub_Publish_Call) Return(_a0 error) *PubSub_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PubSub_Publish_Call) RunAndReturn(run func(context.Context, dto.Message) error) *PubSub_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: ctx, target
func (_m *PubSub) Subscribe(ctx context.Context, target dto.Subscription) (subpub.Subscription, error) {
	ret := _m.Called(ctx, target)

	var r0 subpub.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Subscription) (subpub.Subscription, error)); ok {
		return rf(ctx, target)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.Subscription) subpub.Subscription); ok {
		r0 = rf(ctx, target)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subpub.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.Subscription) error); ok {
		r1 = rf(ctx, target)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PubSub_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type PubSub_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - target dto.Subscription
func (_e *PubSub_Expecter) Subscribe(ctx interface{}, target interface{}) *PubSub_Subscribe_Call {
	return &PubSub_Subscribe_Call{Call: _e.mock.On("Subscribe", ctx, target)}
}

func (_c *PubSub_Subscribe_Call) Run(run func(ctx context.Context, target dto.Subscription)) *PubSub_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.Subscription))
	})
	return _c
}

func (_c *PubSub_Subscribe_Call) Return(_a0 subpub.Subscription, _a1 error) *PubSub_Subscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PubSub_Subscribe_Call) RunAndReturn(run func(context.Context, dto.Subscription) (subpub.Subscription, error)) *PubSub_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewPubSub interface {
	mock.TestingT
	Cleanup(func())
}

// NewPubSub creates a new instance of PubSub. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPubSub(t mockConstructorTestingTNewPubSub) *PubSub {
	mock := &PubSub{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
